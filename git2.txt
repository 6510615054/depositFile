url origin : git remote get-url origin
ดูวันเวลา author email ของ commit  : git log
ดู local branch : git branch
ดู remote branch : git branch -r
ดู tag : git tag
ดู commit เฉพาะ file: git log -- <file>
ดู commit ของ merge pull request ทั้งหมด: git log --merges
ดู commit ของ merge pull request เฉพาะ branch: git log --merges branch
ดู commit จาก commit id ดูได้หมดว่าไฟล์เปลี่ยนยังไง ไฟล์ไหน : git show <commit id>
ดู file ที่ถูก modified ใน tag 0.100.0 : git diff --name-only 0.100.0^ 0.100.0
สร้าง tag ให้ commit id : git tag <tagname> <commit-id> ,-d delete

git stash เป็นคำสั่งใน Git ที่ใช้เพื่อเก็บการเปลี่ยนแปลงที่ยังไม่ได้ commit ไว้ชั่วคราว โดยที่คุณสามารถกลับมาเรียกใช้ได้ในภายหลัง โดยไม่ต้องทำการ commit การเปลี่ยนแปลงเหล่านั้นในขณะนั้น

การทำงานของ git stash
การเก็บการเปลี่ยนแปลง: เมื่อคุณทำงานใน branch ใด branch หนึ่งและมีการเปลี่ยนแปลงที่ยังไม่ได้ commit แต่ต้องการสลับไปทำงานใน branch อื่นหรือไม่ต้องการให้การเปลี่ยนแปลงเหล่านั้นขัดขวาง คุณสามารถใช้ git stash เพื่อเก็บการเปลี่ยนแปลงเหล่านั้นไว้
การเรียกใช้การเปลี่ยนแปลงที่เก็บไว้: คุณสามารถนำการเปลี่ยนแปลงที่เก็บไว้กลับมาใช้งานได้เมื่อคุณต้องการ โดยใช้คำสั่ง git stash apply หรือ git stash pop
การจัดการ stash: คุณสามารถดูรายการของ stash ที่เก็บไว้ได้ด้วย git stash list และสามารถลบ stash ที่ไม่ต้องการได้ด้วย git stash drop หรือ git stash clear

-------------------------------------------------------------------------
git rebase เป็นคำสั่งใน Git ที่ใช้สำหรับรวม commit จาก branch หนึ่งไปยังอีก branch หนึ่ง โดยการ "เปลี่ยนฐาน" (rebase) ของ commit ทำให้ประวัติการ commit เป็นระเบียบมากขึ้น และช่วยให้การทำงานร่วมกับทีมง่ายขึ้น นี่คือวิธีการทำงานและรายละเอียดต่าง ๆ ของ git rebase:

วิธีการทำงานของ git rebase
การย้ายฐาน (Base):

เมื่อคุณทำการ rebase, Git จะหยิบ commit จาก branch ที่คุณเลือก (เช่น feature-branch) และ "วาง" commit เหล่านั้นบนอีก branch (เช่น main หรือ develop) ซึ่งอาจทำให้ commit เหล่านั้นมีประวัติที่สะอาดและเป็นลำดับที่ชัดเจน
การทำให้เป็นลำดับที่สะอาด:

git rebase จะช่วยให้ commit ของคุณมีลำดับที่เป็นระเบียบ ทำให้สามารถติดตามการเปลี่ยนแปลงได้ง่ายขึ้น
การจัดการกับความขัดแย้ง (Merge Conflicts):

หากมีการเปลี่ยนแปลงที่ขัดแย้งกันในระหว่างการ rebase Git จะหยุดและให้คุณแก้ไขความขัดแย้งนั้นก่อนที่จะดำเนินการต่อ
วิธีการใช้งาน git rebase
พื้นฐานของการ Rebase:

git checkout feature-branch
git rebase main

การ Rebase แบบ Interative:

คุณสามารถใช้ rebase แบบ interactive เพื่อปรับเปลี่ยน commit ใน branch ของคุณ เช่น การแก้ไขการ commit, การรวม (squash) commit หรือลบ commit

git rebase -i HEAD~n 
-------------------------------------------------------------------------

git commit --amend --date="1987-08-03" ใช้เพื่อแก้ไข commit ล่าสุดใน Git โดยมีการเปลี่ยนแปลงวันที่ของ commit นั้นให้เป็นวันที่ที่ระบุ

-------------------------------------------------------------------------

git reflog เป็นคำสั่งใน Git ที่ใช้สำหรับแสดงประวัติการอ้างอิง (reference) ของ HEAD ซึ่งช่วยให้คุณสามารถดูการเปลี่ยนแปลงที่เกิดขึ้นกับ HEAD และ branch ต่าง ๆ ได้ในช่วงเวลาที่ผ่านมา นี่คือรายละเอียดเกี่ยวกับการใช้งานคำสั่งนี้:



















Task2
cd /d/working

mkdir m2
cd m2
git init

git config user.name "Name Surname"
git config user.email "xxxxxxxxxx@cn330"

cp /d/working/m_xxxxxxxxxx/AUTHORS /d/working/m2/

git add AUTHORS
git commit -m "Initial commit"

cd ..
zip -r m2.zip m2

cp /d/working/m2 /d/working/m_xxxxxxxxxx
cd /d/working/m_xxxxxxxxxx
git add m2.zip
git commit -m "Complete Task 2"


Task3
cd /d/working/m_xxxxxxxxxx

download repo_m3.zip to /d/working/

Extract the file repo_m3.zip (outside yur cloned directory), e.g. /d/working/.

cd /d/working/repo_m3

create answer3 in /d/working/m_xxxxxxxxxx

complete the exercises
(latest 2 tag : git tag --sort=-creatordate | head -n 2)
(first 2 tag : git tag --sort=creatordate | head -n 2)
(requirement first add : git log -- requirements.txt)
(requirement first commit : git log -- requirements.txt)
(how many commit : git log --oneline -- requirements.txt)
(name of author that latest commit on README.md : git log -1 -- README.md)
(commit id of first merge pull request : git log --merges)
(commit message of commit id : git log e68a68c97c136b75a963c9d5e77d552622384141)
(file that mod in tag : git diff --name-only 0.100.0^ 0.100.0)
(file that mod in commit id "xxx" write diff : git diff 46f5091c9f2e3c029d4aaecb43f95d5e01df6f30)
(commit id when merge typing doc : git log --merges typing-doc)

cd /d/working/m_xxxxxxxxxx

git add answer3.md

git commit -m "Complete Task 3"


Task4
set up like task2

using : (git show) to see what file in each commit and move to m4
git add
git commit
git tag


Task 5
git clone repo_m5 m5

cd /d/working/m5

git checkout -b function origin/function
